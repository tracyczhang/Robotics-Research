(define (domain move-robot-3)
	(:requirements :typing)
	(:types thing cell gripper)
	(:predicates
		(is-blocked ?x - cell)
		(thing-in-cell ?x - thing ?y - cell)
		(is-adjacent ?x - cell ?y - cell)
		(is-robot ?x - thing)
		(is-shirt ?x - thing)
		(is-laundry-bin ?x - thing)
		(in-laundry-bin ?x - thing ?y - thing)
		(in-gripper ?x - thing ?y - gripper)
		(gripper-empty ?x - gripper)
	)
	(:action move
		:parameters (?r - thing ?x - cell ?y - cell)
		:precondition (and
			(is-robot ?r)
			(thing-in-cell ?r ?x)
			(is-adjacent ?x ?y)
			(not (is-blocked ?y))
		)
		:effect (and
			(thing-in-cell ?r ?y)
			(not (thing-in-cell ?r ?x))
		)
	)
	(:action pick_up
		:parameters (?x - cell ?y - cell ?a - thing ?b - thing ?c - gripper)
		:precondition (and
			(is-robot ?a)
			(is-shirt ?b)
			(thing-in-cell ?a ?x)
			(is-adjacent ?x ?y)
			(thing-in-cell ?b ?y)
			(gripper-empty ?c)
			(is-blocked ?y)
		)
		:effect (and
			(in-gripper ?b ?c)
			(not(gripper-empty ?c))
			(not(is-blocked ?y))
		)
	)
	(:action put_in_bin
		:parameters (?x - cell ?y - cell ?a - thing ?b - thing ?c - gripper ?d - thing)
		:precondition (and
			(in-gripper ?b ?c)
			(is-shirt ?b)
			(is-robot ?a)
			(thing-in-cell ?a ?x)
			(is-adjacent ?x ?y)
			(thing-in-cell ?d ?y)
			(is-laundry-bin ?d)
			(not(gripper-empty ?c))
		)
		:effect (and
			(gripper-empty ?c)
			(in-laundry-bin ?b ?d)
			(not(in-gripper ?b ?c))
		)
	)
)
